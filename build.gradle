import java.nio.file.Paths

plugins {
    id 'org.gosu-lang.gosu' version '0.3.10'
    id "com.bmuschko.nexus" version "2.3.1"
    id "io.codearte.nexus-staging" version "0.21.1"
}

group 'xyz.ronella.gosu'
version '1.1.0'

sourceCompatibility = 1.8

repositories {
    maven {
        url 'https://repo.ronella.xyz/artifactory/java-central/'
        credentials {
            username "${artifactoryUsername}"
            password "${artifactoryPassword}"
        }
    }
}

modifyPom {
    project {
        name 'GInfuser'
        description 'A gosu implementation to map a domain class into a DTO *(data transfer object)*. This utilizes annotations to describe how the fields in the DTO must be populated.'
        url 'https://github.com/rcw3bb/ginfuser'
        inceptionYear '2020'

        scm {
            url 'https://github.com/rcw3bb/ginfuser'
            connection 'https://github.com/rcw3bb/ginfuser.git'
            developerConnection 'https://github.com/rcw3bb/ginfuser.git'
        }

        licenses {
            license {
                name 'MIT License'
                url 'https://github.com/rcw3bb/ginfuser/blob/master/LICENSE.md'
                distribution 'repo'
            }
        }

        developers {
            developer {
                id 'rcw3bb'
                name 'Ronaldo Webb'
                email 'ronaldo.c.webb@gmail.com'
            }
        }
    }
}

extraArchive {
    sources = true
    tests = true
    javadoc = true
}

nexus {
    sign = true
    repositoryUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
    snapshotRepositoryUrl = 'https://oss.sonatype.org/content/repositories/snapshots'
}

nexusStaging {
    stagingProfileId = "33650220e7857c"
}

dependencies {
    compile group: 'org.gosu-lang.gosu', name: 'gosu-core', version: '1.14.14'
    testCompile group: 'org.gosu-lang.gosu', name: 'gosu-test', version: '1.14.14'
}

task preparePackage(dependsOn: [jar]) {
    doLast {
        def srcDir = sourceSets.main.gosu.sourceDirectories.asPath
        def destDir = Paths.get(buildDir.absolutePath, "gosu")

        copy {
            from srcDir
            into destDir
        }
    }
}

task jarGosu(dependsOn: [preparePackage]) {
    doLast {
        def srcDir = Paths.get(buildDir.absolutePath, "gosu")
        def jarFilename ="${project.name}-${version}"
        def jarGosuFile = "${jarFilename}-gosu.jar"
        def javaLibsDir = Paths.get(buildDir.absolutePath, "java-libs")
        def gosuLibsDir = Paths.get(buildDir.absolutePath, "gosu-libs")
        def outputGosuFile = Paths.get(gosuLibsDir.toFile().absolutePath, jarGosuFile)
        def libsDir = Paths.get(buildDir.absolutePath, "libs")
        def outputFile = Paths.get(libsDir.toFile().absolutePath, "${jarFilename}.jar")

        ant.zip(destfile: outputGosuFile) {
            fileset(dir: srcDir)
        }

        ant.move file: outputFile, toDir: javaLibsDir

        copy {
            from outputGosuFile
            into libsDir
            rename { filename ->
                filename.replace jarGosuFile, "${jarFilename}.jar"
            }
        }
    }
}

jar.finalizedBy(jarGosu)